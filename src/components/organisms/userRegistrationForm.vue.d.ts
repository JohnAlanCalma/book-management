import { Vue } from 'vue-property-decorator';
export interface IRegistrationParamsParams {
    displayName: string;
    iconFilepath: string;
    emailAddress: string;
    password: string;
    firstName: string;
    familyName: string;
    firstNameKana: string;
    familyNameKana: string;
    birthday: Date;
    hireDate: Date;
    gender: Gender;
}
export default class UserRegistrationForm extends Vue {
    $refs: {
        form: VForm;
    };
    registration: (params: IRegistrationParamsParams) => Promise<void>;
    valid: boolean;
    isSending: boolean;
    schoolDialog: boolean;
    medicalSubjectDialog: boolean;
    firstClinicalTrainingDialog: boolean;
    membershipAgreementDialog: boolean;
    privacyProtectionDialog: boolean;
    mailMagazineDialog: boolean;
    email: string;
    password: string;
    displayName: string;
    firstName: string;
    familyName: string;
    firstNameKana: string;
    familyNameKana: string;
    birthYear: string;
    birthMonth: string;
    birthDay: string;
    hireYear: string;
    hireMonth: string;
    hireDay: string;
    gender: Gender;
    school: string;
    medicalSubject: string;
    firstClinicalTraining: string;
    isAgreeMembershipAgreement: boolean;
    isAggreePrivacyProtection: boolean;
    isSubscribeMailMagazine: boolean;
    get years(): number[];
    get months(): number[];
    get days(): number[];
    get genderList(): string[];
    get prefectures(): string[];
    get membershipAgreementText(): string;
    get emailRules(): (((v: string) => true | "E-mail is required") | ((v: string) => true | "E-mail must be valid"))[];
    get passwordRules(): ((v: string) => true | "Password should be at least 6 characters")[];
    get firstNameRules(): (((v: string) => true | "First name is required") | ((v: string) => true | "Symbol is included in first name"))[];
    get familyNameRules(): (((v: string) => true | "Family name is required") | ((v: string) => true | "Symbol is included in family name"))[];
    get firstNameKanaRules(): (((v: string) => true | "First name kana is required") | ((v: string) => true | "Included not kana characters"))[];
    get familyNameKanaRules(): (((v: string) => true | "Family name kana is required") | ((v: string) => true | "Included not kana characters"))[];
    get birthYearRules(): (((v: string) => true | "Birth year is required") | ((v: string) => true | "Birth year is invalid"))[];
    get birthMonthRules(): (((v: string) => true | "Birth month is required") | ((v: string) => true | "Birth month is invalid"))[];
    get birthDayRules(): (((v: string) => true | "Birth day is required") | ((v: string) => true | "Birth day is invalid"))[];
    get hireYearRules(): (((v: string) => true | "Hire year is required") | ((v: string) => true | "Hire year is invalid"))[];
    get hireMonthRules(): (((v: string) => true | "Hire month is required") | ((v: string) => true | "Hire month is invalid"))[];
    get hireDayRules(): (((v: string) => true | "Hire day is required") | ((v: string) => true | "Hire day is invalid"))[];
    get genderRules(): ((v: string) => true | "Gender is invalid")[];
    get prefectureRules(): ((v: string) => true | "Prefecture is invalid")[];
    get displayNameRules(): (((v: string) => true | "Display name is required") | ((v: string) => true | "Display name is invalid"))[];
    get birthday(): Date;
    get hireDate(): Date;
    closeSchoolDialog(): void;
    closefirstClinicalTrainingDialog(): void;
    closeMedicalSubjectDialog(): void;
    aggreeMembershipAgreement(): void;
    aggreePrivacyProtection(): void;
    subscribeMailMagazine(): void;
    submit(): void;
}
